{"ast":null,"code":"import { useRouter } from \"vue-router\";\nimport { reactive, toRefs } from \"@vue/reactivity\";\nimport Toast, { useToastEffect } from \"../../components/Toast.vue\";\nimport { post } from \"../../utils/request\"; // 将与登录有关的逻辑摘离出来\n\nconst useLoginEffect = showToast => {\n  const router = useRouter();\n  const data = reactive({\n    username: \"\",\n    password: \"\"\n  });\n  const {\n    username,\n    password\n  } = toRefs(data);\n\n  const handleLogin = async () => {\n    try {\n      const {\n        username,\n        password\n      } = data;\n      const result = await post(\"/api/user/login\", {\n        username: data.username,\n        password: data.password\n      });\n      console.log(result);\n\n      if (result?.Error === 0) {\n        localStorage.isLogin = true;\n        router.push({\n          name: \"Home\"\n        });\n      } else {\n        showToast(\"登录失败\");\n      }\n    } catch (e) {\n      showToast(\"请求失败\");\n    }\n  };\n\n  return {\n    handleLogin,\n    username,\n    password\n  };\n}; // 将与注册有关的逻辑摘离\n\n\nconst useRegisterEffect = () => {\n  const router = useRouter();\n\n  const handelRegister = () => {\n    router.push({\n      name: \"Register\"\n    });\n  };\n\n  return {\n    handelRegister\n  };\n};\n\nexport default {\n  name: \"LoginView\",\n\n  setup() {\n    // 如此下来，setup函数的职责就是告诉我们：代码执行的一个流程是咋样的\n    const {\n      show,\n      toastMsg,\n      showToast\n    } = useToastEffect(); // 执行函数，获取到该函数的返回值\n\n    const {\n      handleLogin,\n      username,\n      password\n    } = useLoginEffect(showToast);\n    const {\n      handelRegister\n    } = useRegisterEffect();\n    return {\n      handleLogin,\n      handelRegister,\n      username,\n      password,\n      show,\n      toastMsg,\n      showToast\n    };\n  },\n\n  components: {\n    Toast\n  }\n};","map":{"version":3,"mappings":"AA+BA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,iBAAjC;AACA,OAAOC,KAAP,IAAgBC,cAAhB,QAAsC,4BAAtC;AACA,SAASC,IAAT,QAAqB,qBAArB,C,CAEA;;AACA,MAAMC,cAAa,GAAKC,SAAD,IAAa;EAClC,MAAMC,MAAK,GAAIR,SAAS,EAAxB;EACA,MAAMS,IAAG,GAAIR,QAAQ,CAAC;IACpBS,QAAQ,EAAE,EADU;IAEpBC,QAAQ,EAAE;EAFU,CAAD,CAArB;EAIA,MAAM;IAACD,QAAD;IAAWC;EAAX,IAAuBT,MAAM,CAACO,IAAD,CAAnC;;EACA,MAAMG,WAAU,GAAI,YAAY;IAC9B,IAAI;MACF,MAAM;QAAEF,QAAF;QAAYC;MAAZ,IAAyBF,IAA/B;MACA,MAAMI,MAAK,GAAI,MAAMR,IAAI,CAAC,iBAAD,EAAoB;QAC3CK,QAAQ,EAAED,IAAI,CAACC,QAD4B;QAE3CC,QAAQ,EAAEF,IAAI,CAACE;MAF4B,CAApB,CAAzB;MAIAG,OAAO,CAACC,GAAR,CAAYF,MAAZ;;MACA,IAAIA,MAAM,EAAEG,KAAR,KAAkB,CAAtB,EAAyB;QACvBC,YAAY,CAACC,OAAb,GAAuB,IAAvB;QACAV,MAAM,CAACW,IAAP,CAAY;UAAEC,IAAI,EAAE;QAAR,CAAZ;MACF,CAHA,MAGO;QACLb,SAAS,CAAC,MAAD,CAAT;MACF;IACF,CAbA,CAaE,OAAOc,CAAP,EAAU;MACVd,SAAS,CAAC,MAAD,CAAT;IACF;EACD,CAjBD;;EAkBA,OAAO;IACLK,WADK;IAELF,QAFK;IAEKC;EAFL,CAAP;AAIF,CA7BA,C,CA+BA;;;AACA,MAAMW,iBAAgB,GAAI,MAAI;EAC5B,MAAMd,MAAK,GAAIR,SAAS,EAAxB;;EACA,MAAMuB,cAAa,GAAI,MAAM;IAC3Bf,MAAM,CAACW,IAAP,CAAY;MAAEC,IAAI,EAAE;IAAR,CAAZ;EACD,CAFD;;EAGA,OAAO;IACLG;EADK,CAAP;AAGF,CARA;;AAUA,eAAe;EACbH,IAAI,EAAE,WADO;;EAEbI,KAAK,GAAG;IACN;IACA,MAAM;MAAEC,IAAF;MAAQC,QAAR;MAAkBnB;IAAlB,IAAgCH,cAAc,EAApD,CAFM,CAGN;;IACA,MAAM;MAAEQ,WAAF;MAAeF,QAAf;MAAyBC;IAAzB,IAAsCL,cAAc,CAACC,SAAD,CAA1D;IACA,MAAM;MAAEgB;IAAF,IAAqBD,iBAAiB,EAA5C;IAEA,OAAO;MACLV,WADK;MAELW,cAFK;MAGLb,QAHK;MAGKC,QAHL;MAILc,IAJK;MAICC,QAJD;MAKLnB;IALK,CAAP;EAOD,CAhBY;;EAiBboB,UAAU,EAAE;IAAExB;EAAF;AAjBC,CAAf","names":["useRouter","reactive","toRefs","Toast","useToastEffect","post","useLoginEffect","showToast","router","data","username","password","handleLogin","result","console","log","Error","localStorage","isLogin","push","name","e","useRegisterEffect","handelRegister","setup","show","toastMsg","components"],"sourceRoot":"","sources":["C:\\Carrie\\VVVVVue\\jingdong\\src\\views\\login\\Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper\">\r\n    <img src=\"http://www.dell-lee.com/imgs/vue3/user.png\" alt=\"\" />\r\n    <div class=\"wrapper__input\">\r\n      <input\r\n        type=\"text\"\r\n        class=\"wrapper__input__content\"\r\n        placeholder=\"请输入用户名\"\r\n        v-model=\"username\"\r\n      />\r\n      <!-- 通过v-model这样的指令，\r\n      将input框的内容与data中的内容双向绑定 -->\r\n    </div>\r\n    <div class=\"wrapper__input\">\r\n      <input\r\n        type=\"password\"\r\n        class=\"wrapper__input__content\"\r\n        placeholder=\"请输入密码\"\r\n        v-model=\"password\"\r\n      />\r\n    </div>\r\n    <div @click=\"handleLogin\" class=\"wrapper__login-button\">登录</div>\r\n    <div @click=\"handelRegister\" class=\"wrapper__login-link\">注册</div>\r\n  </div>\r\n  <Toast\r\n  v-if=\"show\"\r\n  :message=\"toastMsg\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport { useRouter } from \"vue-router\";\r\nimport { reactive, toRefs } from \"@vue/reactivity\";\r\nimport Toast, { useToastEffect } from \"../../components/Toast.vue\";\r\nimport { post } from \"../../utils/request\";\r\n\r\n// 将与登录有关的逻辑摘离出来\r\nconst useLoginEffect = (showToast)=>{\r\n  const router = useRouter();\r\n  const data = reactive({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const {username, password} = toRefs(data)\r\n  const handleLogin = async () => {\r\n    try {\r\n      const { username, password } = data\r\n      const result = await post(\"/api/user/login\", {\r\n        username: data.username,\r\n        password: data.password,\r\n      });\r\n      console.log(result)\r\n      if (result?.Error === 0) {\r\n        localStorage.isLogin = true;\r\n        router.push({ name: \"Home\" });\r\n      } else {\r\n        showToast(\"登录失败\");\r\n      }\r\n    } catch (e) {\r\n      showToast(\"请求失败\");\r\n    }\r\n  };\r\n  return {\r\n    handleLogin,\r\n    username, password\r\n  }\r\n}\r\n\r\n// 将与注册有关的逻辑摘离\r\nconst useRegisterEffect = ()=>{\r\n  const router = useRouter();\r\n  const handelRegister = () => {\r\n    router.push({ name: \"Register\" });\r\n  };\r\n  return {\r\n    handelRegister\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: \"LoginView\",\r\n  setup() {\r\n    // 如此下来，setup函数的职责就是告诉我们：代码执行的一个流程是咋样的\r\n    const { show, toastMsg, showToast } = useToastEffect()\r\n    // 执行函数，获取到该函数的返回值\r\n    const { handleLogin, username, password } = useLoginEffect(showToast)\r\n    const { handelRegister } = useRegisterEffect()\r\n\r\n    return {\r\n      handleLogin,\r\n      handelRegister,\r\n      username, password,\r\n      show, toastMsg,\r\n      showToast,\r\n    };\r\n  },\r\n  components: { Toast },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../style/viriables.scss\";\r\n\r\n.wrapper {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 0;\r\n  right: 0;\r\n  transform: translateY(-50%);\r\n  img {\r\n    display: block;\r\n    margin: 0 auto 0.4rem auto;\r\n    height: 0.66rem;\r\n    width: 0.66rem;\r\n  }\r\n  &__input {\r\n    margin: 0 0.4rem 0.16rem 0.4rem;\r\n    padding: 0 0.16rem;\r\n    height: 0.48rem;\r\n    background: #f9f9f9;\r\n    border: 0.01rem solid rgba(0, 0, 0, 0.1);\r\n    border-radius: 6px;\r\n    &__content {\r\n      width: 100%;\r\n      border: none;\r\n      background: none;\r\n      outline: none;\r\n      line-height: 0.48rem;\r\n      color: $content-notice-fontcolor;\r\n      font-size: 0.16rem;\r\n      &::placeholder {\r\n        color: $content-notice-fontcolor;\r\n      }\r\n    }\r\n  }\r\n  &__login-button {\r\n    text-align: center;\r\n    margin: 0.32rem 0.4rem 0.16rem 0.4rem;\r\n    line-height: 0.48rem;\r\n    box-shadow: 0 4px 8px 0 rgba(0, 145, 255, 0.32);\r\n    border-radius: 4px;\r\n    font-size: 0.16rem;\r\n    background: #0091ff;\r\n    color: #ffffff;\r\n  }\r\n  &__login-link {\r\n    font-size: 0.14rem;\r\n    text-align: center;\r\n    color: $content-notice-fontcolor;\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}